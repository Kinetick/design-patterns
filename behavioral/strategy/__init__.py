"""
Поведенческий паттерн проектирования - стратегия.

pattern.py
    Паттерн позволяет инкапсулировать семейство логики в отдельные классы
    с одинаковым интерфейсом. Классы использующие этот интерфейс будут
    делегировать выполнение специальным объектам (алгоритмам). Алгоритмы
    можно менять во время выполнения программы.

example.py
    Для примера создадим автомобиль у которого реализован интерфейс:
        - move - применить движение
        - set_gear - изменить скорость

    В зависимости от текущей скорости автомобиля, будет
    изменяться и состояние движения:
        - при нейтральной скорости, автомобиль может двигаться только под
        воздействием внешней силы
        - на первой и т.д. скорости, автомобиль движется вперед
        - задняя скорость позволяет двигаться в обратном направлении
"""

from .example import (
    FirstGear,
    LastGear,
    NeutralGear,
    ReverseGear,
    SecondGear,
    WarTrackCar,
)

__all__ = [
    "FirstGear",
    "LastGear",
    "ReverseGear",
    "SecondGear",
    "WarTrackCar",
    "NeutralGear",
]
