"""
Поведенческий паттерн - интерпретатор.

pattern.py
    Паттерн позволяет интерпретировать входные данные согласно описанным
    правилам языка. Например интерпретатор математических выражений. Каждая
    лексема представляет собой либо терминальное выражение, либо
    нетерминальное. Терминальное выражение не продолжает интерпретацию в
    глубину. Нетерминальное выражение можно рассматривать, как узел
    обработки дерева:
        Пример: 5 * ( 4 + 2 )
            T - терминальное выражение (5, 4, 2)
            N - нетерминальное выражение (*, +)

        N(*)
      /    \
    T(5)    N(+)
           /   \
         T(4)    T(2)

example.py
    В качестве примера реализуем интерпретатор математического выражения.
    Поддерживаемые операторы:
        -  "+" - сложение
        -  "-" - вычитание
        -  "*" - умножение
        -  "/" - деление
    Также, будет реализовано правило приоритетов арифметических операций и
    скобок.
"""

from .example import (
    ArithmeticPrioritiesRepo,
    BracketExpression,
    approximate_method,
    level_0,
    level_1,
)

__all__ = [
    "BracketExpression",
    "ArithmeticPrioritiesRepo",
    "approximate_method",
    "level_0",
    "level_1",
]
