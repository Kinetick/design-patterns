"""
Порождающий паттерн проектирования - строитель.

pattern.py
    Паттерн похож на фабрику, однако используется если нужно создать сложный
    объект (составной). В отличие от фабрики возвращает объект на последнем
    шаге.

example.py
    Предположим мы хотим создать автомобиль. В нашем представлении он будет
    состоять только из:
        - кузова (body)
        - двигателя (engine)
        - колес (wheels)

    Комбинация компонентов автомобиля - порождает новый тип автомобиля.
    Так для дизельного автомобиля мы можем изменить тип двигателя, не меняя
    остальные компоненты. Также мы:
        - не плодим кучу классов автомобилей, тип определяет "фарш"
        - мы разбиваем создание автомобиля на этапы (компоненты/детали)

    Для примера возьмем водителя, который будет управлять созданным
    автомобилем. Все, что водителю известно об автомобиле, что им можно
    управлять.
"""
from .example import Driver
from .pattern import AbstractCarBuilder, DieselCarBuilder

__all__ = [
    "Driver",
    "AbstractCarBuilder",
    "DieselCarBuilder"
]
